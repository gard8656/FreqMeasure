#include "stdafx.h"
#ifndef WIN32
#include "Debug.h"
#include "Log.h"
#include "Hardware/Timer.h"
#include "Settings/Settings.h"
#include <cstdlib>
#endif


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint  Debug::timeStart = 0;
uint  Debug::timeCounter = 0;
uint  Debug::timeStartCounter = 0;
char *Debug::file = 0;
int   Debug::line = 0;


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Debug::StartProfiling()
{
    timeStart = TIME_US;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Debug::PointProfiling(char *)
{
    //LOG_WRITE("%s %d", point, TIME_US - timeStart);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Debug::ClearTimeCounter()
{
    timeCounter = 0;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Debug::StartIncreaseCounter()
{
    timeStartCounter = TIME_US;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Debug::StopIncreaseCounter()
{
    timeCounter += (TIME_US - timeStartCounter);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint Debug::GetTimeCounterUS()
{
    return timeCounter;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Debug::ShowSends()
{
    return DEBUG_SHOW_SENDS;
}



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint Debug::FreeHeap()
{
    /*
    uint max = 1024 * 1024;
    uint min = 0;

    while (min < max)
    {
        void *buffer = 0;
        buffer = std::malloc(max);            // Пытаемся выделить память
        if (buffer == 0)                            // Если не получилось
        {
            max = (max + min) / 2;                  // то уменьшаем верхнюю границу
            continue;
        }

        min = max;
        max = (uint)(max * 1.5);
        std::free(buffer);
    }
    
    return min;
    */

    //char buffer[100];
    //
    //__heapstats

    return 0;
}
